platform :ios, "12.0"
use_frameworks!

source "https://cdn.cocoapods.org/"

$binary_pods = Set.new

def binary_pod(name, *args, **kwargs)
  kwargs_cloned = kwargs.clone
  kwargs_cloned[:binary] = enabled_prebuilt_pods if kwargs_cloned[:binary].nil?
  pod name, *args, **kwargs_cloned

  $binary_pods << name if kwargs_cloned[:binary]
end

def enabled_prebuilt_pods
  ENV["ENABLE_PREBUILT_POD_LIBS"] == "true"
end

pods_originally_distributed_as_vendor = [
  "GoogleMaps",
  "GoogleSignIn"
]

if enabled_prebuilt_pods
  plugin "cocoapods-binary-cache"
  config_cocoapods_binary_cache(
    cache_repo: {
      "default" => {
        "remote" => "https://github.com/bigbangvn/demo-pod-binary-cache-prebuilt-libs.git",
        "local" => "~/.cocoapods-binary-cache/PrebuiltPodIntegration-libs"
      }
    },
    excluded_pods: [],
    save_cache_validation_to: ".stats/cocoapods_binary_cache.json",
    strict_diagnosis: true # Fail if any abnormal integration is spotted
  )
end

target "PrebuiltPodIntegration" do
  # Has `*.bundle` outside the framework
  binary_pod "SwiftDate", "6.1.0"
  binary_pod "BKMoneyKit", "0.0.12"
  binary_pod "IQKeyboardManagerSwift", "6.1.1"
  binary_pod "GoogleSignIn", "4.2.0"

  # Has `*.bundle` inside the framework
  binary_pod "GoogleMaps", "2.7.0"

  target "PrebuiltPodIntegrationTests" do
    inherit! :search_paths
  end
end

pre_install do |installer|
  must_be_dynamic_frameworks = []

  def build_type_cls
    Gem::Version.new(Pod::VERSION) >= Gem::Version.new("1.9.0") ? Pod::BuildType : Pod::Target::BuildType
  end

  def make_static(pod)
    pod.instance_variable_set(
      :@build_type,
      build_type_cls.new(:linkage => :static, :packaging => :framework)
    )
  end

  def make_dynamic(pod)
    pod.instance_variable_set(
      :@build_type,
      build_type_cls.new(:linkage => :dynamic, :packaging => :framework)
    )
  end

  installer.pod_targets.each do |pod|
    if must_be_dynamic_frameworks.include?(pod.name)
      make_dynamic(pod)
    else
      make_static(pod)
    end
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      config.build_settings["SWIFT_SUPPRESS_WARNINGS"] = "YES"
      config.build_settings["GCC_WARN_INHIBIT_ALL_WARNINGS"] = "YES"
    end
  end

  FileUtils.mkdir_p(".stats")
  pods_to_integrate = ($binary_pods - pods_originally_distributed_as_vendor).to_a
  File.open(".stats/pods_to_integrate.txt", "w") { |f| f.puts(pods_to_integrate) }
end
